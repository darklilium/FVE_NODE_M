(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.index = mod.exports;
  }
})(this, function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.setOverflow = setOverflow;
  exports.easeInOut = easeInOut;
  exports.animate = animate;
  exports.onOutsideClick = onOutsideClick;
  exports.isTouchDevice = isTouchDevice;
  /* eslint-disable no-param-reassign */

  function setOverflow(enabled, selector) {
    var el = selector ? document.querySelector(selector) : document.body;
    if (enabled) {
      el.classList.add('hide-overflow');
    } else {
      el.classList.remove('hide-overflow');
    }
  }

  function easeInOut(currentTime, start, change, duration) {
    currentTime /= duration / 2;
    if (currentTime < 1) {
      return change / 2 * currentTime * currentTime + start;
    }
    currentTime -= 1;
    return -change / 2 * (currentTime * (currentTime - 2) - 1) + start;
  }

  /**
   *
   * @param el
   * @param increment
   * @param elapsedTime
   * @param transitionTime
   * @param styleName
   * @param currentValue
   * @param finalValue
   * @param next
   */
  function animate(el, increment, elapsedTime, transitionTime, styleName, startValue, currentValue, finalValue, next) {
    elapsedTime += increment;
    el.style[styleName] = easeInOut(elapsedTime, startValue, finalValue, transitionTime) + 'px';

    if (elapsedTime < transitionTime) {
      setTimeout(function () {
        animate(el, increment, elapsedTime, transitionTime, styleName, startValue, currentValue, finalValue, next);
      }, increment);
    } else {
      next(elapsedTime);
    }
  }

  /**
   * Takes an event, a container node, and a function to call if the clicked
   * element is not inside of the container node.
   *
   * @param {Object} event the click event
   * @param {Object} node the container node to compare against
   * @param {func} callback the function to call if the clicked element
   *    is not inside the container node
   */
  function onOutsideClick(event, node, callback) {
    var target = event.target;
    if (target === node) {
      return;
    }

    while (target.parentNode) {
      if (target === node) {
        return;
      }
      target = target.parentNode;
    }

    callback(event);
  }

  /**
   * Checks if touch events are in the browser.
   * @return {bool} true if it is a touch device
   */
  function isTouchDevice() {
    return typeof window !== 'undefined' && ('ontouchstart' in window || !!navigator.maxTouchPoints);
  }
});